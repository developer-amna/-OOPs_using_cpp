\\ Program # 1

#include<iostream>     // include the iostream library (a preprocessor directive)
using namespace std;     // use the stanadard namespace
	class num
	{
		private :     // access specifier
			
			int variable;
		
		public:	      // access specifier
			
			void input()      // function to take input from user
			{
			cout <<	"Enter value in integer type variable :";
				cin>>variable;
			}
			
			void output()        // function to display output
			
			{
			    cout<<"The value stored in variable is :"<< variable;
			}
			
	};
int main ()               // main function from where execution starts

{
	num display;
	
	display.input();      // call input function to take input from user
	display.output();      // call output function to display output

   return 0; //return 0 to operating system
}

\\ Program # 2

#include<iostream>     // include the iostream library (a preprocessor directive)
using namespace std;     // use the stanadard namespace

      class marks      // class definition
      {
      	     private:       // access specifier
      	     	
      	     	int sub1;
      	     	int sub2;
      	     	int sub3;
      	     	
      	     public:     // access specifier
      	     	
      	     	void input()         // function to take input from user
	  	     	{
	  	     		cout<<"Enter marks of three subjects : ";
	  	     		cin>>sub1>>sub2>>sub3;
	  	     	}
      	     	
				   
				 int sum( )     // function to calculate sum of three subjects
				 {
				 	return sub1+sub2+sub3;
				   }
				   
				   float avg( )     // function to calculate average of three subjects
				   {
		            return (sub1+sub2+sub3)/3.0;

					 }  
	  };
int main ()               // main function from where execution starts
{
	marks m;            // create an object of class marks
	 m.input();
	 cout<<"The sum of these numbers is : "<<m.sum( )<<endl;
	 cout<<"The average is : "<<m.avg( )<<endl;
	 
	
   return 0; //return 0 to operating system
}




\\ Program # 3

#include<iostream>     // include the iostream library (a preprocessor directive)
using namespace std;     // use the stanadard namespace

      class circle        // class definition
      {
      	     private:       // access specifier
      	     	
      	     	float radius;
      	     	
      	     public:         // access specifier
      	     	 
      	     	void input(float r)
      	     	{
      	     		radius=r;
				   }
				   
				void area ()     // function to calculate area of circle
				 {
				 	cout<<"The area of circle is :"<<3.14*radius*radius<<endl;
				   }
				   
				void circum( )     // function to calculate circumference of circle
				   {
		             cout<<"The circumferrence of circle is :"<<2*3.14*radius;

					 }  
	  };
int main ()               // main function from where execution starts
{
     circle  c;
     int r;
     
     cout<<"Enter radius :";      // prompt user to enter radius
     cin>>r;
	 c.input(r);
	 
	c. area ();
	c. circum( );
	 
	 
   return 0; //return 0 to operating system
}

\\ Program # 4

#include<iostream>     // include the iostream library (a preprocessor directive)
using namespace std;     // use the stanadard namespace

class book         // class declaration
{
	  private:    //access specifier
	  	j
	  	int book_id;
	  	int pages;
	  	float book_price;
	  	
	  public:   //  access specifier
	  	
	  	void get()
	  	{
	  		cout<<"Enter book id :";
	  		cin>>book_id;
	  		cout<<"Enter book pages :";
	  		cin>>pages;
	  		cout<<"Enter book price :";
	  		cin>>book_price;
		  }
		  
		  
		 void show()
		 {
		 	cout<<" book id is:"<<book_id<<endl;
		 	cout<<" book pages are:"<<pages<<endl;
		 	cout<<" book price is:"<<book_price<<endl;

         }
         
        void set(int id,int pg,float pr)
		{
			book_id=id;
			pages=pg;
			book_price=pr;
		 } 
		 
		 
		 float get_price()
		 {
		 	return  book_price;
		 }
         
};
int main ()               // main function from where execution starts
{
	book b1,b2;
	b1.get();
	b2.set(2,320,120.45);
	cout<<"\n The most expensive book is:";
	if(b1.get_price()>b2.get_price())
	  b1.show();
	  
	 else
	  b2.show(); 
	
   return 0; //return 0 to operating system
}

\\ Program # 5

#include<iostream>     // include the iostream library (a preprocessor directive)
using namespace std;     // use the stanadard namespace
class student 
{
	private:    // access specifier
	    int rollno;
	  	char  grade;
	  	string name;
	  	
	  	
	public:         // access specifier
	  // use setters
	      void setrollno(int n)
	      {
	      	rollno=n;
		  }
		  
		  void setgrade( char c)
		  {
		  	grade=c;
		  }
		  
	      void setname(string a) 
		  {
		  	
		  	name=a;
		  }	
			
			
			void display() // function to display student details
			{
				cout<<"Roll no is :"<<rollno<<endl;
				cout<<"Grade is :"<<grade<<endl;
				cout<<"Name is :"<<name<<endl;
					  }	  	
};
int main ()               // main function from where execution starts
{
	student s;
   s.setname("Amna");
   s.setrollno(01);
   s.setgrade('A');
   s.display();
	
   return 0; //return 0 to operating system
}

\\ Program # 6

#include<iostream>     // include the iostream library (a preprocessor directive)
using namespace std;     // use the stanadard namespace
class hello 
{
	private:
		int n;
		
	public:
		hello()        // constructor
		{
			cout<<"object created......"<<endl;
			}
			
	void setn(int n)
		{
		this ->	n=n;    // this pointer is the address of current object
		}
		int getn()
		{
			return n;
		}
				
};

int main ()               // main function from where execution starts
{
	hello x,y,z;
	x.setn(100);
	cout<<"The value of n is :"<<x.getn();
	
	
	
	
   return 0; //return 0 to operating system
}

\\ Program # 7

#include<iostream>     // include the iostream library (a preprocessor directive)
using namespace std;     // use the stanadard namespace
class num 
{
	private:
		int n1;
		int n2;
		
	public:
		num()
		{
		n1=n2=10;
			}
			
	void display()
	
		{
			cout<<"The value of n1 is :"<<n1;
			cout<<"\nThe value of n2 is :"<<n2;
			cout<<"\nAverage is :"<<(n1+n2)/2;
		}
				
};

int main ()               // main function from where execution starts
{
	 num n;
	 n.display();	
   return 0; //return 0 to operating system
}

\\ Program # 8

#include<iostream>     // include the iostream library (a preprocessor directive)
using namespace std;     // use the stanadard namespace
	class book 
	{
	
		int pages ;
		int price ;
		string title;
		
	public:
	  
	   void get()
	   {
	   	cout<<"Enter pages :";
	   	cin>>pages;
	   	cout<<"Enter price :";
	   	cin>>price;
	   	cout<<"Enter title :";
	   	cin>>title;
		   }
		   
		   
		   void show()
		   {
		   	cout<<"Pages are :"<<pages<<endl;;
		   	cout<<"Price is :"<<price<<endl;
		   	cout<<"Title is :"<<title<<endl;
			   }
		};
		
		
		
int main ()               // main function from where execution starts
{
	book b1;
	b1.get();
	book b2=b1;
	book b3=b1;
	 
	 cout<<"\nThe detail of book 1 is :"<<endl;
	 b1.show();
	  cout<<"\nThe detail of book 2 is :"<<endl;
	  b2.show();
	   cout<<"\nThe detail of book 3 is :"<<endl;
	b3.show();
   return 0; //return 0 to operating system
}

\\ Program # 9

#include<iostream>     // include the iostream library (a preprocessor directive)
using namespace std;     // use the stanadard namespace
	class student 
	{
	
		int marks;
		char grade;
		
	public:
		
		student (int m, char g)
		{
			marks = m;
			grade = g;
		}
	  
	   void show()
	   {
	   	cout<<"Marks :"<<marks<<endl;
	   	
	   	cout<<"Grade is  :"<<grade<<endl;
	   	
		   }
		   

		};
		
		
		
int main ()               // main function from where execution starts
{
	student s1(23,'A'),s2(25,'A');
	 
	 cout<<"\nThe detail of student is :"<<endl;
	 s1.show();
	  cout<<"\nThe detail of student 2 is :"<<endl;
	  s2.show();
	
   return 0; //return 0 to operating system
}

\\ Program # 10

#include<iostream>     // include the iostream library (a preprocessor directive)
using namespace std;     // use the stanadard namespace
class Person
{
	string name;
	int age;
	
public:
	void setValues(string n, int a)
	{
		name=n;
		age=a;
	}
	
	void copied(const Person &p)
	{
		name=p.name;
		age=p.age;
	}
	
    void display()
	{
		cout<<"\nName is :"<<name;
		cout<<"\nAge is :"<<age;
		}
			
};
int main ()               // main function from where execution starts
{
	Person p1,p2;
	p1.setValues("ali",23);
	
	cout<<"Before passing object:";
	p1.display();
	p2.display();
	
	p2.copied(p1);
	
	cout<<"After passing object :";
	  p1.display();
	  p2.display();
	
	
	
	
	
   return 0; //return 0 to operating system
}

\\ Program # 11

#include<iostream>     // include the iostream library (a preprocessor directive)
using namespace std;     // use the stanadard namespace
class Person
{
	private:
		int age;
		string name;
	
	public:
		 Person()
		{
			age=20;
			name="Amna";
		}
		
		 Person(int a, string n)
		{
			age=a;
			name=n;
		}
		
		
	void display()
	{
		cout<<"\n The age is :"<<age;
		cout<<"\n The name is :"<<name;
		}	
};
int main ()               // main function from where execution starts
{
	Person p1;
 Person	p2(24,"ali");
	p1.display();
	p2.display();
   return 0; //return 0 to operating system
}

\\Program # 12

#include<iostream>    // include the iostream library (a preprocessor directive)
using namespace std;   // use the stanadard namespace
class student
{
	public:
		string name;
		int age;
		void display (){
			cout<<"name="<<name<<endl;
			cout<<"age="<<age<<endl;
		}
};
int main(){         // main function from where execution starts
	student s;
	s.name="Amna";
	s.age=21;
	s.display();
	return 0;          \\ return 0 to operating system
}

\\ Program # 13

#include<iostream>     // include the iostream library (a preprocessor directive)
using namespace std;       // use the stanadard namespace
class student
{
	private:
		int age;
	public:
	    void setAge(int a){
	    	age=a;
		}	
		int getAge(){
			return age;
		}
};
int main(){          // main function from where execution starts
	student s;
	s.setAge(21);
	cout<<s.getAge();
	return 0;           // return 0 to operating system
}


\\ Program # 14

#include<iostream>           // include the iostream library (a preprocessor directive)
using namespace std;        // use the stanadard namespace
class student
{
	private:
		int rollno;
		string name;
		char grade;
		float CGPA;
	public:
	    void setrollno(int r){        \\ function to set roll number
	    	rollno=r;
		}	
		int getrollno(){              \\ function to get roll number
			return rollno;
		}
		void setname(string n){
			name=n;
		}
		string getname(){
			return name;
		}
		void setgrade(char g){
			grade=g;
		}
		char getgrade(){
			return grade;
		}
		void setCGPA(float f){
			CGPA=f;
		}
		float getCGPA(){
			return CGPA;
		}
};
int main(){                // main function from where execution starts
      student s;
      s.setrollno(2);
      cout<<"Roll No="<<s.getrollno()<<endl;
      s.setname("Amna");
      cout<<"Name="<<s.getname()<<endl;
      s.setgrade('A');
      cout<<"Grade="<<s.getgrade()<<endl;
      s.setCGPA(3.75);
      cout<<"CGPA="<<s.getCGPA()<<endl;
      return 0;                          // return 0 to operating system
  }


\\ Program # 15

#include<iostream>          // include the iostream library (a preprocessor directive)
using namespace std;          // use the stanadard namespace

class student{
	public:
		student(){             // default constructor
			cout<<"Welcome default Constructor called."<< endl;
		}
};

int main(){            // main function from where execution starts
	student s1;
	return 0;            // return 0 to operating system
}


\\ Program # 16

#include<iostream>          // include the iostream library (a preprocessor directive)
using namespace std;           // use the stanadard namespace

class student{
	private:
		string name;
		int rollNo;
	public:
		student (string n,int r) {           // parameterized constructor
			name = n;
			rollNo = r;
		}
		
		void show() {
			cout<<"Name:"<<name<<endl<<"Roll No:"<<rollNo<<endl;
		}
};

int main(){                    // main function from where execution starts
    student s1("Amna",101);
    s1.show();             // display student details
    return 0;              // return 0 to operating system
}

\\ Program # 17

#include<iostream>            // include the iostream library (a preprocessor directive)
using namespace std;           // use the stanadard namespace

class student {
	private:
		string name;
		int rollNo;
	public:
		student(string n, int r) {            // parameterized constructor
			name = n;
			rollNo = r;
		}
		student(const student &s) {               // copy constructor
			name = s.name;
			rollNo = s.rollNo;
		}
		void show() {
		   cout<<"Name:"<<name<<endl<<"Roll No:"<<rollNo<<endl;
	}
};

int main()                // main function from where execution starts
      {
      	student s1("Amna", 101);
      	s1.show();
		        	student s2=s1;           // using copy constructor
      	s2.show();
		  return 0;
		  	  }

\\ Program # 18

#include<iostream>          // include the iostream library (a preprocessor directive)
using namespace std;          // use the stanadard namespace
class student{
	private:
		int rollno;
		string name;
	public:
		student(){            // default constructor
			rollno=0;
			name="unknown";
			cout<<"default constructor called"<<endl;
		}
		student (int r, string n){             // parameterized constructor
		   rollno=r;
		   name=n;
		   cout<<"Parametrized constructor called"<<endl;
	}
	student (const student &s){                   // copy constructor
	    // copy values from s to this object
	    rollno=s.rollno;
	    name=s.name;
	    cout<<"copy constructor called"<<endl;
	}
	void show(){
	cout<<"Roll No:"<<rollno<<endl<<"Name:"<<name<<endl;
	}
};
int main()
{
	cout<<"\n---default constructor Example"<<endl;
	student s1;
	s1.show();
	cout<<"\n---parametrized constructor Example"<<endl;
	student s2(101,"Amna");
	s2.show();
	cout<<"\n---copy constructor Example"<<endl;
	student s3=s2;
	s3.show();
	return 0;	
}

\\ Program # 19

#include<iostream>                 // include the iostream library (a preprocessor directive)
using namespace std;                   // use the stanadard namespace
class student {
	private:
		int rollNo;
		string name;
		float marks;
	public:
		student(){               // default constructor
			rollNo=0;
			name="unknown";
			marks=0.0;
			cout<<"Default Constructor called"<<endl;
		}
		student (int r,string n,float m){           // parameterized constructor
			rollNo=r;
			name=n;
			marks=m;
			cout<<"Parameterized Constructor called"<<endl;
		}
		student (const student &s){              // copy constructor
		     rollNo=s.rollNo;
			 name=s.name;
			 marks=s.marks;
			 cout<<"Copy constructor called"<<endl;	
		}
		void setRollNo(int r){              // function to set roll number
			rollNo=r;
		}
		void setName(string n){
			name=n;
		}
		void setMarks(float m){
			marks=m;
		}
		int getRollNo(){                  // function to get roll number
			return rollNo;
		}
		string getName(){
			return name;
		}
		float getMarks(){
			return marks;
		}
		void show(){
			cout<<"Roll No:"<<rollNo<<endl<<"Name:"<<name<<endl<<"Marks:"<<marks<<endl;
		}
};
int main() {                  // main function from where execution starts
        cout<<"\n---Default Constructor---"<<endl;
        student s1;
        s1.setRollNo(11);
        s1.setName("Amna");
        s1.setMarks(89.5);
        s1.show();                  
        cout<<"\n---Parameterized Constructor---"<<endl;
        student s2(22,"Usman",95.0);
        s2.show();
        cout<<"\n---copy constructor---"<<endl;
        student s3=s2;
        s3.show();
        cout<<"\n---Getter Example---"<<endl;        
        cout<<"Roll No:"<<s1.getRollNo()<<endl;              
        cout<<"Name:"<<s1.getName()<<endl;
        cout<<"Marks:"<<s1.getMarks()<<endl;
        return 0;               \\ return 0 to operating system
    }

	\\program # 20

	#include<iostream>           // include the iostream library (a preprocessor directive)
using namespace std;             // use the stanadard namespace
class Gadget{
	private:
		const int price;          // constant member variable
		 
		 
		 // const member variable must be initialized in the constructor
		 // and cannot be changed later
	public:
		 
		Gadget(int p):price(p){
		}
		~Gadget(){
			
		}
		int getPrice()const{
		return price;
		}
		void display() const{
		cout<<"Price="<<price<<endl;
		}
};
int main(){
	Gadget g1(200);
	g1.display();
	cout<<"Price="<<g1.getPrice();
	return 0;
	}

\\ Program # 21

#include<iostream>            // include the iostream library (a preprocessor directive)
using namespace std;             // use the stanadard namespace
class Gadget{
	private:
	    int id;
	    static int count;
    public: 		 // static member variable
    	Gadget(){
    		id=0;
    		count++;
		}
		Gadget(int i){
			id=i;
			count++;
		}
		void showID(){
			cout<<"ID="<<id<<endl;
		}
		static void showcountID(){           // static member function
			cout<<"Count="<<count<<endl;
		}
	
};
  int Gadget::count=0;
int main(){
	Gadget g1;
	Gadget g2(101);
	Gadget g3;
	g1.showID();
	g2.showID();
	g3.showID();
	Gadget::showcountID();             // call static member function using class name
	return 0;
		}

\\ Program # 22

#include <iostream>
#include <memory>
using namespace std;

// ?? Version 1: Memory Leak (No Destructor)
class BookLeak {
private:
    string* title;

public:
    BookLeak(string name) {
        title = new string(name);
        cout << "Book created: " << *title << endl;
    }

    void showTitle() {
        cout << "Title: " << *title << endl;
    }

    // ? No destructor — memory leak
};

// ? Version 2: Fixed with Destructor
class BookFixed {
private:
    string* title;

public:
    BookFixed(string name) {
        title = new string(name);
        cout << "Book created: " << *title << endl;
    }

    ~BookFixed() {
        delete title;  // ? memory free
        cout << "Book destroyed\n";
    }

    void showTitle() {
        cout << "Title: " << *title << endl;
    }
};

// ?? Version 3: Smart Pointer
class BookSmart {
private:
    string title;

public:
    BookSmart(string name) : title(name) {
        cout << "Book created: " << title << endl;
    }

    void showTitle() {
        cout << "Title: " << title << endl;
    }

    ~BookSmart() {
        cout << "Book destroyed\n";
    }
};

// ?? Functions to run each version
void memoryLeakVersion() {
    cout << "\n--- Memory Leak Version ---\n";
    BookLeak* b1 = new BookLeak("C++ Memory Leak");
    b1->showTitle();
    // ? delete b1 nahi kiya — memory leak
}

void destructorVersion() {
    cout << "\n--- Destructor Version ---\n";
    BookFixed* b2 = new BookFixed("C++ Destructor Fix");
    b2->showTitle();
    delete b2;  // ? destructor call hoga
}

void smartPointerVersion() {
    cout << "\n--- Smart Pointer Version ---\n";
    _ptr<BookSmart> b3(new BookSmart("C++ Smart Pointer"));
    b3->showTitle();
    // ? smart pointer khud memory free karega
}

int main() {
    memoryLeakVersion();
    destructorVersion();
    smartPointerVersion();
    return 0;
}

\\ Program # 23

#include <iostream>
using namespace std;

class Student {
private:
    int* marks;

public:
    Student() {
        marks = new int[5];  // 5 integers ke liye memory li gayi
        cout << "Memory allocated for marks\n";
    }

    ~Student() {
        // Agar delete[] marks nahi likha to memory leak ho jayega
        delete[] marks;
        cout << "Memory deallocated for marks\n";
    }
};

int main() {
    Student* s1 = new Student();  // object banaya
    delete s1;  // object delete kiya, destructor call hoga
    return 0;
}

\\ Program # 24


#include<iostream>             // include the iostream library (a preprocessor directive)
using namespace std;            // use the stanadard namespace

class Teacher{
	private:
		int teacher_id;
		string name;
		int age;
		float salary;
	public:
		teacher(){
			teacher_id=0;
			name="";
			age=0;
			salary=0.0;
		}
		Teacher(int id,string n,int a,float s){
			teacher_id=id;
			name=n;
			age=a;
			salary=s;
		}
		~Teacher(){             // destructor
			// cleanup code if needed
		cout<<"Destructor called for teacher  "<<name<<endl;
		}
		void setTeacherID(int id){
			teacher_id=id;
		}
		void setName(string n){
			name=n;
		}
		void setAge(int a){
			age=a;
		}
		void setSalary(float s){
			salary=s;
		}
		int getTeacherID(){
			return teacher_id;
		}
		string getName(){
			return name;
		}
		int getAge(){
			return age;
		}
		float getSalary(){
			return salary;
		}
	void display(){
		cout<<"Teacher ID: "<<teacher_id<<endl;
		cout<<"Name: "<<name<<endl;
		cout<<"Age: "<<age<<endl;
		cout<<"Salary: "<<salary<<endl;
	}	
	void compareSalary(Teacher t2){             // function to compare salaries of two teachers
		if(salary>t2.salary){
			cout<<"\n"<<name<<" has a higher salary "<<salary<<endl;
		}
		else if(salary<t2.salary){
			cout<<"\n"<<t2.name<<" has a higher salary "<<t2.salary<<endl;
		}
		else{
			cout<<"\nBoth teachers have equal salary"<<salary<<endl;
		}
	}
};
int main(){
	Teacher t1(101," Amna",21,50000.0);             // create object of Teacher class
	Teacher t2(102," Samreen",20,55000.0);      
	t1.display();                         // display details of first teacher
	t2.display();
	t1.compareSalary(t2);
	return 0;                      // return 0 to operating system
}

\\ Program # 25

#include<iostream>               // include the iostream library (a preprocessor directive)
#include<cstring>                   // for string manipulation
using namespace std;

class Book{
	private:
		char* name;
	public:
		Book(const char* n ){          // constructor with parameter
			name=new char[strlen(n)+1];
			strcpy(name, n);
		}
		Book(const Book &b){
		name=new char[strlen(b.name)+1];           // copy constructor
			strcpy(name,b.name);
		}
		void setName(const char* n){
			
			name=new char[strlen(n)+1];
			strcpy(name, n);
		}
	 char* getName() const{
			return name;
		}
		void display(){
			cout<<"Name= "<<name<<endl;
		}
		~Book(){                         // destructor
			delete[] name;
		}
};
int main()
{
	Book b1(" Object Oriented Programming");
	Book b2(b1);
	b1.display();
	b2.setName(" Data Structures");
	b2.display();
return 0;                // return 0 to operating system
}

\\ Program # 26

#include<iostream>            // include the iostream library (a preprocessor directive)
using namespace std;            // use the stanadard namespace
class Student{
	public:
		string name;
		Student(string n):name(n){}         // constructor with parameter
		
	
};
class Teacher{
	private:
		string name;
	public:
		Teacher(string n):name(n){}
		void teach(Student s){
			cout<<name<<" teaches "<<s.name<<".";         \\ display teaching message
		}
		
};
int main(){
	Student s1("Amna");
	Teacher t1("Sir Imran");
	t1.teach(s1);          // call teach function to display message
	return 0;
}

\\program # 27

#include<iostream>           // include the iostream library (a preprocessor directive)
using namespace std;           // use the stanadard namespace
class Engine{
	public:
		Engine(){
		cout<<"I am constructor of Engine."<<endl;
	}
	void start(){
		cout<<"Engine is started."<<endl;
}
~Engine(){
	cout<<"I am destructor of Engine."<<endl;
}
};
class Car{
	private:
		Engine engine;
	public:
		car(){
			cout<<"I am constructor of car"<<endl;
		}
		void drive(){
			engine.start();
			cout<<"Car is moving."<<endl;
					}
					~Car(){
						cout<<"I am destructor of car."<<endl;
					}
};
int main()
{
	Car c;                // create object of Car class
	c.drive();         // call drive function to start engine and move car
	
	return 0;
}

\\ Program # 28

#include<iostream>           // include the iostream library (a preprocessor directive)
using namespace std;         // use the stanadard namespace
class Box{
	private:
		int Length;
	public:
		Box (int l):Length(l){}
		friend void display_Length(Box box);          // friend function declaration
	
};
void display_Length(Box box)           
{
	cout<<box.Length;
}
int main(){
	Box b1(5);
	display_Length (b1);
	return 0;
}

\\ Program # 29

#include<iostream>        // include the iostream library (a preprocessor directive)
using namespace std;        // use the stanadard namespace
class Student{
	public:
		string name;
		Student(string n):name(n){}		
};
class Department{
	private:
		Student* student;        // pointer to Student object
	public:
		Department(Student* s1){           // constructor with Student pointer parameter
			student=s1;
		}
		void display(){
			cout<<student->name<<" is in department."<<endl;
		}
};
int main(){
	Student s1("Amna");
	Department cs(&s1);        // create Department object with Student pointer
	cs.display();
	return 0;
	}

	\\program # 30

	#include<iostream>        // include the iostream library (a preprocessor directive)
using namespace std;        // use the stanadard namespace
class Complex{
	private:
		int real;
		int img;
	public:
		Complex(int r,int i):real(r),img(i){}        // constructor with parameters
		void display(){
			cout<<real<<"+"<<img<<"i";
		}
		Complex operator+(const Complex &obj)        // operator overloading function
		{
			Complex temp;             // create temporary object to store result
			temp.real=real+obj.real;
			temp.img=img+obj.img;
			return temp;
		}
};
int main(){
	Complex c1(2,3),c2(4,5);
	Complex c3=c2+c1;
	c3.display();
	return 0;
}

\\program # 31

#include <iostream>
using namespace std;

// Define a class named Car
class Car {
private:
    string brand;
    int year;

public:
    // Constructor
    Car(string b, int y) {
        brand = b;
        year = y;
    }

    // Method to display car details
    void displayInfo() {
        cout << "Brand: " << brand << ", Year: " << year << endl;
    }
};

int main() {
    // Create an object of Car
    Car myCar("Toyota", 2020);

    // Call the method
    myCar.displayInfo();

    return 0;
}

\\ Program # 32

#include <iostream>
using namespace std;

class Car {
private:
    string brand;
    int year;

public:
    // Default constructor
    Car(string b, int y) {
        brand = b;
        year = y;
    }

    // Copy constructor
    Car(const Car &other) {
        brand = other.brand;
        year = other.year;
        cout << "Copy constructor called!" << endl;
    }

    void display() {
        cout << "Brand: " << brand << ", Year: " << year << endl;
    }
};

int main() {
    Car car1("Toyota", 2020);     // Original object
    Car car2 = car1;              // Copy constructor is called here

    car1.display();
    car2.display();

    return 0;
}

\\ Program # 33

#include <iostream>
#include <cstring>
using namespace std;

class Student {
private:
    char* name;

public:
    // Constructor
    Student(const char* n) {
        name = new char[strlen(n) + 1];  // Allocate memory
        strcpy(name, n);                 // Copy string
    }

    // Copy Constructor (Deep Copy)
    Student(const Student& other) {
        name = new char[strlen(other.name) + 1];
        strcpy(name, other.name);
        cout << "Deep copy constructor called!" << endl;
    }

    // Display method
    void display() {
        cout << "Name: " << name << endl;
    }

    // Destructor
    ~Student() {
        delete[] name;
        cout << "Destructor called for " << name << endl;
    }
};

int main() {
    Student s1("Ali");
    Student s2 = s1;  // Deep copy constructor is called

    s1.display();
    s2.display();

    return 0;
}

\\ Program # 34

#include <iostream>
#include <cstring>
using namespace std;

class Shallow {
public:
    char* data;

    Shallow(const char* d) {
        data = new char[strlen(d) + 1];
        strcpy(data, d);
    }

    // Default copy constructor (shallow copy)
    ~Shallow() {
        delete[] data;
        cout << "Destructor called\n";
    }

    void show() {
        cout << "Data: " << data << endl;
    }
};

int main() {
    Shallow obj1("Hello");
    Shallow obj2 = obj1;  // Shallow copy

    obj1.show();
    obj2.show();

    return 0;
}
\\Problem: Jab destructor chalega, dono objects same memory ko delete karne ki koshish karenge — double delete error ho sakta hai.


\\ Program # 35

#include <iostream>
#include <cstring>
using namespace std;

class Deep {
public:
    char* data;

    Deep(const char* d) {
        data = new char[strlen(d) + 1];
        strcpy(data, d);
    }

    // Deep copy constructor
    Deep(const Deep& other) {
        data = new char[strlen(other.data) + 1];
        strcpy(data, other.data);
        cout << "Deep copy constructor called\n";
    }

    ~Deep() {
        delete[] data;
        cout << "Destructor called\n";
    }

    void show() {
        cout << "Data: " << data << endl;
    }
};

int main() {
    Deep obj1("World");
    Deep obj2 = obj1;  // Deep copy

    obj1.show();
    obj2.show();

    return 0;
}

\\ Problem solved: Ab dono objects ke paas apni alag memory hai, to destructor safely chalega bina kisi error ke.


\\Program # 36

#include <iostream>
using namespace std;

class Employee {
private:
    int id;
    string name;
    float salary;

public:
    // Constructor
    Employee(int empId, string empName, float empSalary) {
        id = empId;
        name = empName;
        salary = empSalary;
    }

    // Display function
    void showDetails() {
        cout << "ID: " << id << ", Name: " << name << ", Salary: $" << salary << endl;
    }
};

int main() {
    // Array of Employee objects
    Employee empList[3] = {
        Employee(101, "Ali", 50000),
        Employee(102, "Sara", 60000),
        Employee(103, "Zain", 55000)
    };

    // Displaying all employee details
    for (int i = 0; i < 3; i++) {
        empList[i].showDetails();
    }

    return 0;
}

\\ Program # 37

#include <iostream>
using namespace std;

class Employee {
private:
    int id;
    string name;
    float salary;

public:
    // Constructor 1: No parameters
    Employee() {
        id = 0;
        name = "Unknown";
        salary = 0.0;
    }

    // Constructor 2: Only ID and Name
    Employee(int empId, string empName) {
        id = empId;
        name = empName;
        salary = 0.0;
    }

    // Constructor 3: All parameters
    Employee(int empId, string empName, float empSalary) {
        id = empId;
        name = empName;
        salary = empSalary;
    }

    void showDetails() {
        cout << "ID: " << id << ", Name: " << name << ", Salary: $" << salary << endl;
    }
};

int main() {
    // Using different constructors
    Employee e1;                                 // Default constructor
    Employee e2(101, "Ali");                     // Constructor with ID and Name
    Employee e3(102, "Sara", 65000.5);           // Constructor with all parameters

    // Displaying details
    e1.showDetails();
    e2.showDetails();
    e3.showDetails();

    return 0;
}

//Program # 38

#include<iostream>
using namespace std;
class Counter{
	private:
		int count;
	public:
		Counter(int c=0) : count(c){}
		
		//prefix ++
		Counter operator++(){
			++count;
			return *this;
		}
		
		//postfix ++
		Counter operator++(int){
			Counter temp=*this;
			count++;
			return temp;
		}
		void display(){
			cout<<count<<endl;
		}
};
int main(){
	Counter c1(5);
	++c1;         //calls prefix
	c1.display();    //output : 6
	
	c1++;        //calls pistfix
	c1.display();       //output : 7
}

// Program # 39

#include<iostream>
using namespace std;
class Number{
	    int* value;
	public:
		Number(int v=0){
			value= new int(v);
		}
		
		    // Copy Constructor
    Number(const Number& obj) {
        value = new int(*(obj.value));
    }

		//Overload = opeartor
		Number& operator=(const Number& obj){
			if (this !=&obj){ //avoid self-assignment
			*value = *(obj . value);
			}
			return *this;
		}
		
		 // Destructor
    ~Number() {
        delete value;
    }

		void display(){
			cout<<*value<<endl;
		}
	    
};
int main(){
	Number n1(10), n2(20);
	n2=n1;   //calls operator=
	n2.display();    //output: 10
}

// Program # 40

/*describe use of pointers as a member of a class  shallow copy and deep copy

shallow copy  is an issue that created when we allow compiler to create the copy constructor itself and deep copy is the solution to this issue. In shallow copy, the pointer in the copied object points to the same memory location as the original object, which can lead to issues like double deletion. In deep copy, a new memory location is allocated for the copied object, ensuring that each object has its own separate memory.*/
/* shallow copy  is an issue that created when we allow compiler to create the copy constructor itself and deep copy is the solution to this issue. In shallow copy, the pointer in the copied object points to the same memory location as the original object, which can lead to issues like double deletion. In deep copy, a new memory location is allocated for the copied object, ensuring that each object has its own separate memory.*/

#include<iostream>     // include the iostream library (a preprocessor directive)
using namespace std;     // use the stanadard namespace
class car
{
   private:	
     int  *price;
      
    public:
    	car( int value)
    	{
    		price = new int;
    		*price=value;
    		cout<<"\nPrice is "<<price;
    		
    		cout<<"\nH i am constructor ";
		}
		car(const car &obj)
		{
			price = new int;
			*price=*(obj.price);
		}
		~ car()
		{
			delete price;
			cout<<"\nHi";
		}
};
int main ()               // main function from where execution starts
{
	car s1(100);
	car s2(s1);
   return 0; //return 0 to operating system
}

\\ Program # 41

#include<iostream>
using namespace std;
class Animal{
	public:
	virtual	void sound()=0;
};
class Cat : public Animal{          
	public:
		void sound(){
			cout<<"Cat's Sound"<<endl;
		}
};
class Dog : public Animal{
	public:
		void sound(){
			cout<<"Dog's Sound"<<endl;
		}
};
int main(){
	Animal *ptr=new Cat();
	ptr->sound();
	
	delete ptr;
	return 0;
}







